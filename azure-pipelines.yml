# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

jobs:
  - job: AspNetCore
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: DotNetCoreInstaller@0
        inputs:
          packageType: 'sdk'
          version: '3.1.102'
      
      - script: dotnet build MsCoreOne.sln --configuration $(buildConfiguration)
        displayName: 'dotnet build $(buildConfiguration)'

      # Run all tests with "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura" to generate the code coverage file
      - task: DotNetCoreCLI@2
        displayName: dotnet test
        inputs:
          command: test
          arguments: '--configuration $(BuildConfiguration) --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=\"opencover\" /p:CoverletOutput=BuildReports\Coverage\ /p:ExcludeByFile=\"**/Persistence/ApplicationDbContextSeed.cs\" /p:Exclude=\"[*]MsCoreOne.Infrastructure.Migrations.*,[*]MsCoreOne.Pages.*,[*]MsCoreOne.Areas.*\"'
          projects: 'tests/**/*.csproj'
          nobuild: true

      # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
      # First install the tool on the machine, then run it
      - script: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator "-reports:$(Build.SourcesDirectory)/tests/**/coverage.cobertura.xml" "-targetdir:$(Build.SourcesDirectory)/CodeCoverage" "-reporttypes:HtmlInline_AzurePipelines;Cobertura"
        displayName: Create Code coverage report

      # Publish the code coverage result (summary and web site)
      # The summary allows to view the coverage percentage in the summary tab
      # The web site allows to view which lines are covered directly in Azure Pipeline
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage test'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
          reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

      - task: DotNetCoreCLI@2
        displayName: Publish MsCoreOne APIs
        inputs:
          command: publish
          projects: src/MsCoreOne.Api/MsCoreOne.Api.csproj
          publishWebProjects: false
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: true

      - task: PublishBuildArtifacts@1
        displayName: 'PublishBuildArtifacts - API'
        inputs:
          ArtifactName: 'mscoreone-api'
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/MsCoreOne.Api.zip'

